
R : Copyright 2006, The R Foundation for Statistical Computing
Version 2.3.1 (2006-06-01)
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> test_location <- function(){
+     Y <- c(2, 3, 4, 8, 12, 22, 28, 29, 33, 34, 38, 40, 41, 47, 48, 50, 51, 54, 56, 59) 
+     print(ltsReg(y=Y))
+     print(ltsReg(y=Y, intercept=TRUE))
+     print(ltsReg(y=Y, intercept=FALSE))
+     print(ltsReg(y=Y, alpha=1))
+     print(ltsReg(Y~1))
+     print(ltsReg(Y~1-1))
+     print(ltsReg(Y~1, alpha=1))
+ }
> 
> test_rsquared <- function(){
+     x1 <- c(2, 3, 4, 8, 12, 22, 28, 29, 33, 34, 38, 40, 41, 47, 48, 50, 51, 54, 56, 59) 
+     y1 <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 3.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5) 
+     print(ltsReg(x1,y1,alpha=0.8))
+     print(ltsReg(y1,x1,alpha=0.8))
+     print(ltsReg(y1,x1,alpha=0.8, intercept=FALSE))
+ }
> 
> dodata <- function(nrep=1, time=FALSE, short=FALSE, full=TRUE, method = c("FASTLTS","MASS")){
+ ##@bdescr
+ ## Test function ltsReg() on the literature datasets: 
+ ##
+ ## Call ltsReg() for all regression datasets available in rrcov and print:
+ ##  - execution time (if time == TRUE)
+ ##  - objective fucntion
+ ##  - best subsample found (if short == false)
+ ##  - outliers identified (with cutoff 0.975) (if short == false)
+ ##  - estimated coeficients and scale (if full == TRUE)
+ ## 
+ ##@edescr
+ ##
+ ##@in  nrep              : [integer] number of repetitions to use for estimating the 
+ ##                                   (average) execution time
+ ##@in  time              : [boolean] whether to evaluate the execution time
+ ##@in  short             : [boolean] whether to do short output (i.e. only the 
+ ##                                   objective function value). If short == FALSE,
+ ##                                   the best subsample and the identified outliers are 
+ ##                                   printed. See also the parameter full below
+ ##@in  full              : [boolean] whether to print the estimated coeficients and scale 
+ ##@in  method            : [character] select a method: one of (FASTLTS, MASS) 
+ 
+     dolts <- function(x, y, xname, nrep=1){ 
+         if(method == "MASS"){
+             lts <- ltsreg(x,y)
+             quan <- as.integer((dim(x)[1] + (dim(x)[2] + 1) + 1)/2)   #default: (n+p+1)/2
+         } else {
+             lts <- ltsReg(x, y, mcd = FALSE)
+             quan <- as.integer(lts$quan)
+         }
+ 
+         crit <- lts$crit
+         if(time){
+             xtime <- system.time(dorep(x, y, nrep, method))[1]/nrep
+             xres <- sprintf("%3d %3d %3d %12.6f %10.3f\n", dim(x)[1], dim(x)[2], quan, crit, xtime)
+         }
+         else{
+             xres <- sprintf("%3d %3d %3d %12.6f\n", dim(x)[1], dim(x)[2], quan, crit)
+         }
+         
+         lpad<-lname-nchar(xname)
+         cat(pad.right(xname,lpad), xres)
+         if(!short){
+             cat("Best subsample: \n")
+             print(lts$best)
+ 
+             ibad <- which(lts$lts.wt == 0)
+             names(ibad) <- NULL
+             nbad <- length(ibad)
+             cat("Outliers: ",nbad,"\n")
+             if(nbad > 0)
+                 print(ibad)
+             if(full){
+                 cat("-------------\n")
+                 print(lts)
+                 print(summary(lts))
+             } 
+             cat("--------------------------------------------------------\n")
+         }
+     } 
+ 
+     lname <- 20
+     library(rrcov)
+     method <- match.arg(method)
+     if(method == "MASS")
+         library(MASS)
+ 
+     data(heart)
+     data(stars)
+     data(phosphor)
+     data(stackloss)
+     data(coleman)
+     data(salinity)
+     data(aircraft)
+     data(delivery)
+     data(wood)
+ 
+     data(hbk)
+ 
+     tmp <- sys.call()
+     cat("\nCall: ", deparse(substitute(tmp)),"\n")
+     
+     cat("========================================================\n")
+     cat("Data Set               n   p  Half      obj         Time\n")
+     cat("========================================================\n")
+     dolts(heart.x,heart.y, data(heart), nrep)
+     dolts(stars.x,stars.y, data(stars), nrep)
+     dolts(phosphor.x,phosphor.y, data(phosphor), nrep)
+     dolts(stack.x,stack.loss, data(stackloss), nrep)
+     dolts(coleman.x,coleman.y, data(coleman), nrep)
+     dolts(salinity.x,salinity.y, data(salinity))
+     dolts(aircraft.x,aircraft.y, data(aircraft))
+     dolts(delivery.x,delivery.y, data(delivery))
+     dolts(wood.x,wood.y, data(wood), nrep)
+     dolts(hbk.x,hbk.y, data(hbk), nrep)
+ 
+     cat("========================================================\n")
+ }
> 
> dorep <- function(x, y, nrep=1, method=c("FASTLTS","MASS")){ 
+ 
+     # set mcd=FALSE - we want to time only the LTS algorithm
+     for(i in 1:nrep)
+     if(method == "MASS")
+ #        ltsreg(x,y,control=list(psamp = NA, nsamp = "best", adjust = FALSE))
+         ltsreg(x,y)
+     else
+         ltsReg(x, y, mcd = FALSE)
+ } 
> 
> dogen <- function(nrep=1, eps=0.4, method=c("FASTLTS","MASS")){
+ 
+     dolts <- function(x, y, nrep=1){ 
+         gc()
+         xtime <- system.time(dorep(x, y, nrep, method))[1]/nrep
+         n <- as.integer(dim(x)[1])
+         p <- as.integer(dim(x)[2] + 1)
+         cat(sprintf("%6d %3d %10.2f\n", n, p, xtime))
+         xtime   
+     } 
+ 
+     library(rrcov)
+     method <- match.arg(method)
+     if(method == "MASS")
+         library(MASS)
+ 
+     ap <- c(2, 3, 5, 10)
+     an <- c(100, 500, 1000, 10000, 20000, 30000, 50000)
+ 
+     set.seed(0)
+ 
+     tottime <- 0
+ 
+     tmp <- sys.call()
+     cat("\nCall: ", deparse(substitute(tmp)),"\n")
+     
+     cat("     n   p       Time\n")
+     cat("=====================\n")
+     for(i in 1:length(an)) {
+         for(j in 1:length(ap)) {
+             n <- an[i]
+             p <- ap[j]
+             if(5*p <= n){
+                 a <- gendata(n, p, eps)
+                 tottime <- tottime + dolts(a$x,a$y, nrep)
+             }
+         } 
+     }
+     
+     cat("=====================\n")
+     cat("Total time: ", tottime*nrep, "\n")
+ }
> 
> #### gendata() ####
> # Generates a data set with bad leverage points (outliers in x-space) 
> # n observations in p dimensions acording to the model:
> #   yi = Xi1+Xi2+...+ei
> # where ei - N(0,1) is the error term, Xi,j for j=1...p-1 - N(0,100) are 
> # the non-trivial explanatory variables and xip is the intercept term.
> # The outliers in the x-space are introduced by replacing eps. percent of
> # xi1 by values distributed as N(100,100).
> #
> # Defaults: eps=0
> #
> gendata <- function(n,p,eps=0){
+ 
+     if(eps < 0 || eps >= 0.5)
+         stop(message="eps must be in [0,0.5)")
+ 
+     p <- p-1
+     x <- matrix(rnorm(n*(p),0,100), c(n,p))
+     y <-rowSums(x) + 1 + rnorm(n, 0, 1)
+     
+     nbad <- as.integer(eps * n)
+     xind <- sort(sample(n,nbad))
+     xbad <- rnorm(nbad,100,100)
+     for(i in 1:nbad){
+         x[xind[i],1] <- xbad[i] 
+     }
+     list(x=x, y=y, xind=xind)
+ }
> 
> 
> pad.right <- function(z, pads)
+ {
+ ### Pads spaces to right of text
+     padding <- paste(rep(" ", pads), collapse = "")
+     paste(z, padding, sep = "")
+ }
> 
> whatis<-function(x){
+     if(is.data.frame(x))
+         cat("Type: data.frame\n")
+     else if(is.matrix(x))
+         cat("Type: matrix\n")
+     else if(is.vector(x))
+         cat("Type: vector\n")
+     else
+         cat("Type: don't know\n")
+ }
> 
> library(rrcov)
Scalable Robust Estimators with High Breakdown Point (version 0.3-04)
> dodata()

Call:  dodata() 
========================================================
Data Set               n   p  Half      obj         Time
========================================================
heart                 12   2   8     0.065810
Best subsample: 
[1]  1  2  4  5  6  7 11 12
Outliers:  4 
[1]  3  8  9 10
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
Intercept         X1         X2  
  63.3528    -1.2265     0.6884  

Scale estimate 1.525 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

 [1] -1.3927  0.1691  0.0000  0.4434 -0.3413  0.1655 -0.1148  0.0000  0.0000
[10]  0.0000  0.6663  0.4045

Coefficients:
          Estimate Std. Error t value Pr(>|t|)
Intercept 63.35284    4.02270  15.749 1.88e-05
X1        -1.22650    0.14032  -8.741 0.000325
X2         0.68835    0.05278  13.041 4.73e-05

Residual standard error: 0.7654 on 5 degrees of freedom
Multiple R-Squared: 0.9913,	Adjusted R-squared: 0.9879 
F-statistic:   286 on 2 and 5 DF,  p-value: 6.992e-06 

--------------------------------------------------------
stars                 47   1  25     1.880169
Best subsample: 
 [1]  2  4  6 10 13 15 17 19 21 22 25 27 28 29 33 35 36 38 39 41 42 43 44 45 46
Outliers:  6 
[1]  7  9 11 20 30 34
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
Intercept          X  
   -8.500      3.046  

Scale estimate 0.4562 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

    Min      1Q  Median      3Q     Max 
-0.7840 -0.2137  0.0000  0.2267  0.5916 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)
Intercept  -8.5001     1.9263  -4.413 7.83e-05
X           3.0462     0.4373   6.965 2.39e-08

Residual standard error: 0.3407 on 39 degrees of freedom
Multiple R-Squared: 0.5544,	Adjusted R-squared: 0.5429 
F-statistic: 48.51 on 1 and 39 DF,  p-value: 2.392e-08 

--------------------------------------------------------
phosphor              18   2  11     0.245377
Best subsample: 
 [1]  1  2  3  4  6  7 11 12 14 15 18
Outliers:  1 
[1] 17
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
Intercept         X1         X2  
 60.91489    1.21103    0.08833  

Scale estimate 13.54 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

     Min       1Q   Median       3Q      Max 
-30.2967  -3.5911  -0.6916   4.2514  17.1156 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)
Intercept 60.91489   10.19950   5.972 3.41e-05
X1         1.21103    0.35494   3.412  0.00421
X2         0.08833    0.25742   0.343  0.73661

Residual standard error: 12.69 on 14 degrees of freedom
Multiple R-Squared: 0.5188,	Adjusted R-squared: 0.4501 
F-statistic: 7.548 on 2 and 14 DF,  p-value: 0.005972 

--------------------------------------------------------
stackloss             21   3  13     0.083378
Best subsample: 
 [1]  5  6  7  8  9 10 11 12 15 16 17 18 19
Outliers:  4 
[1]  1  3  4 21
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
 Intercept    Air.Flow  Water.Temp  Acid.Conc.  
 -37.65246     0.79769     0.57734    -0.06706  

Scale estimate 1.922 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

    Min      1Q  Median      3Q     Max 
-2.5065 -0.4236  0.0000  0.5764  1.9342 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)
Intercept  -37.65246    4.73205  -7.957 2.37e-06
Air.Flow     0.79769    0.06744  11.828 2.48e-08
Water.Temp   0.57734    0.16597   3.479  0.00408
Acid.Conc.  -0.06706    0.06160  -1.089  0.29611

Residual standard error: 1.253 on 13 degrees of freedom
Multiple R-Squared: 0.975,	Adjusted R-squared: 0.9692 
F-statistic:   169 on 3 and 13 DF,  p-value: 1.159e-10 

--------------------------------------------------------
coleman               20   5  13     0.019426
Best subsample: 
 [1]  2  5  6  7  8  9 11 13 14 15 16 19 20
Outliers:  2 
[1]  3 18
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
Intercept         X1         X2         X3         X4         X5  
 29.75772   -1.69854    0.08512    0.66617    1.18400   -4.06675  

Scale estimate 1.119 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

    Min      1Q  Median      3Q     Max 
-1.2155 -0.3887  0.0000  0.3056  0.9845 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)
Intercept 29.75772    5.53224   5.379 0.000166
X1        -1.69854    0.46602  -3.645 0.003358
X2         0.08512    0.02079   4.093 0.001490
X3         0.66617    0.03824  17.423 6.94e-10
X4         1.18400    0.16425   7.208 1.07e-05
X5        -4.06675    0.84867  -4.792 0.000440

Residual standard error: 0.7824 on 12 degrees of freedom
Multiple R-Squared: 0.9883,	Adjusted R-squared: 0.9835 
F-statistic: 203.2 on 5 and 12 DF,  p-value: 3.654e-11 

--------------------------------------------------------
salinity              28   3  16     0.065610
Best subsample: 
 [1]  2  3  4  6  7 12 14 15 17 18 19 20 21 22 26 27
Outliers:  4 
[1]  5 16 23 24
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
Intercept         X1         X2         X3  
  38.0635     0.4429    -0.2065    -1.3734  

Scale estimate 1.233 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

    Min      1Q  Median      3Q     Max 
-2.4823 -0.3899  0.0000  0.3387  1.7013 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)
Intercept 38.06346    5.17184   7.360 4.13e-07
X1         0.44288    0.08604   5.147 4.90e-05
X2        -0.20647    0.13748  -1.502    0.149
X3        -1.37337    0.19465  -7.056 7.67e-07

Residual standard error: 1.03 on 20 degrees of freedom
Multiple R-Squared: 0.8989,	Adjusted R-squared: 0.8838 
F-statistic:  59.3 on 3 and 20 DF,  p-value: 3.92e-10 

--------------------------------------------------------
aircraft              23   4  14     0.298554
Best subsample: 
 [1]  1  5  6  7  8  9 10 11 13 14 15 17 20 23
Outliers:  2 
[1] 16 22
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
 Intercept          X1          X2          X3          X4  
 9.5007403  -3.0487969   1.2100330   0.0013810  -0.0005549  

Scale estimate 5.693 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

   Min     1Q Median     3Q    Max 
-6.669 -2.429  0.000  2.791  6.793 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)
Intercept  9.5007403  5.5775325   1.703  0.10784
X1        -3.0487969  0.9191472  -3.317  0.00436
X2         1.2100330  0.6492298   1.864  0.08081
X3         0.0013810  0.0003924   3.519  0.00285
X4        -0.0005549  0.0003281  -1.691  0.11017

Residual standard error: 4.349 on 16 degrees of freedom
Multiple R-Squared: 0.8257,	Adjusted R-squared: 0.7822 
F-statistic: 18.95 on 4 and 16 DF,  p-value: 6.467e-06 

--------------------------------------------------------
delivery              25   2  14     0.112945
Best subsample: 
 [1]  2  5  6  7  8 10 12 13 14 15 17 21 22 25
Outliers:  3 
[1]  1  9 24
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
Intercept         X1         X2  
  3.71959    1.40578    0.01625  

Scale estimate 2.383 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

     Min       1Q   Median       3Q      Max 
-5.03209 -1.03055 -0.01243  0.34737  4.23711 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)
Intercept 3.719594   0.910107   4.087 0.000628
X1        1.405778   0.131281  10.708 1.73e-09
X2        0.016252   0.003009   5.402 3.27e-05

Residual standard error: 2.32 on 19 degrees of freedom
Multiple R-Squared: 0.9624,	Adjusted R-squared: 0.9585 
F-statistic: 243.3 on 2 and 19 DF,  p-value: 2.901e-14 

--------------------------------------------------------
wood                  20   5  13     0.070258
Best subsample: 
 [1]  2  3  9 10 11 12 13 14 15 16 17 18 20
Outliers:  4 
[1]  4  6  8 19
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
Intercept         X1         X2         X3         X4         X5  
  0.37733    0.21738   -0.08501   -0.56430   -0.40033    0.60745  

Scale estimate 0.01236 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

      Min        1Q    Median        3Q       Max 
-0.009281 -0.001771  0.000000  0.001146  0.013004 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)
Intercept  0.37733    0.05402   6.986 3.78e-05
X1         0.21738    0.04212   5.162 0.000424
X2        -0.08501    0.19771  -0.430 0.676341
X3        -0.56430    0.04349 -12.975 1.40e-07
X4        -0.40033    0.06544  -6.118 0.000113
X5         0.60745    0.07858   7.730 1.59e-05

Residual standard error: 0.007451 on 10 degrees of freedom
Multiple R-Squared: 0.9583,	Adjusted R-squared: 0.9375 
F-statistic:    46 on 5 and 10 DF,  p-value: 1.397e-06 

--------------------------------------------------------
hbk                   75   3  40     3.724554
Best subsample: 
 [1] 11 12 14 16 17 18 20 25 26 30 31 32 33 34 35 36 37 39 40 41 42 44 45 46 48
[26] 50 55 56 58 59 60 61 63 64 66 67 69 71 72 74
Outliers:  10 
 [1]  1  2  3  4  5  6  7  8  9 10
-------------
Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

Coefficients:
Intercept         X1         X2         X3  
 -0.18046    0.08138    0.03990   -0.05167  

Scale estimate 0.744 


Call:
ltsReg.default(x = x, y = y, mcd = FALSE)

    Min      1Q  Median      3Q     Max 
-0.9263 -0.3955  0.0000  0.3968  1.0106 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)
Intercept -0.18046    0.10445  -1.728    0.089
X1         0.08138    0.06667   1.221    0.227
X2         0.03990    0.04048   0.986    0.328
X3        -0.05167    0.03537  -1.461    0.149

Residual standard error: 0.5572 on 61 degrees of freedom
Multiple R-Squared: 0.04278,	Adjusted R-squared: -0.004292 
F-statistic: 0.9088 on 3 and 61 DF,  p-value: 0.4421 

--------------------------------------------------------
========================================================
> test_rsquared()
Call:
ltsReg.default(x = x1, y = y1, alpha = 0.8)

Coefficients:
Intercept         x1  
        1          0  

Scale estimate 0 

Call:
ltsReg.default(x = y1, y = x1, alpha = 0.8)

Coefficients:
Intercept         y1  
   25.921      5.305  

Scale estimate 18.04 

Call:
ltsReg.default(x = y1, y = x1, intercept = FALSE, alpha = 0.8)

Coefficients:
   y1  
31.44  

Scale estimate 24.64 

> test_location()
Call:
ltsReg.default(y = Y)

Coefficients:
    Y  
44.62  

Scale estimate 19.74 

Call:
ltsReg.default(y = Y, intercept = TRUE)

Coefficients:
    Y  
44.62  

Scale estimate 19.74 

Call:
ltsReg.default(y = Y, intercept = FALSE)

Coefficients:
    Y  
44.62  

Scale estimate 19.98 

Call:
ltsReg.default(y = Y, alpha = 1)

Coefficients:
    Y  
32.95  

Scale estimate 19.34 

Call:
ltsReg.formula(formula = Y ~ 1)

Coefficients:
    Y  
44.62  

Scale estimate 19.74 

Call:
ltsReg.formula(formula = Y ~ 1 - 1)

Coefficients:
    Y  
44.62  

Scale estimate 19.98 

Call:
ltsReg.formula(formula = Y ~ 1, alpha = 1)

Coefficients:
    Y  
32.95  

Scale estimate 19.34 

> 
