
R version 2.9.0 Under development (unstable) (2009-01-12 r47554)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rrcov)
Loading required package: robustbase
Loading required package: pcaPP
Loading required package: mvtnorm
pcaPP 0.1-1 loaded
Scalable Robust Estimators with High Breakdown Point (version 0.5-01)
> library(MASS)
> 
> dodata <- function(nrep = 1, time = FALSE, full = TRUE) {
+     ##@bdescr
+     ## Test the function covMest() on the literature datasets:
+     ##
+     ## Call covMest() for all regression datasets available in rrcov and print:
+     ##  - execution time (if time == TRUE)
+     ##  - The constants c and M
+     ##  - determinant of the covariance matrix
+     ##  - estimated center and covarinance matrix if full == TRUE)
+     ##
+     ##@edescr
+     ##
+     ##@in  nrep              : [integer] number of repetitions to use for estimating the
+     ##                                   (average) execution time
+     ##@in  time              : [boolean] whether to evaluate the execution time
+     ##@in  full              : [boolean] whether to print the estimated cente and covariance matrix
+ 
+     domest <- function(x, xname, nrep = 1) {
+         n <- dim(x)[1]
+         p <- dim(x)[2]
+         mm <- covMest(x)
+         crit <- log(mm$crit)
+         c1 <- mm$c1
+         M <- mm$M
+ 
+         if(time) {
+             xtime <- system.time(dorep(x, nrep))[1]/nrep
+             xres <- sprintf("%3d %3d %8.4f %8.4f %12.6f %10.3f\n",
+                             dim(x)[1], dim(x)[2], c1, M, crit, xtime)
+         }
+         else {
+             xres <- sprintf("%3d %3d %8.4f %8.4f %12.6f\n", dim(x)[1], dim(x)[2], c1, M, crit)
+         }
+         lpad <- lname-nchar(xname)
+         cat(pad.right(xname,lpad), xres)
+ 
+         if(full) {
+             cat("-------------\n")
+             print(mm)
+             cat("----------------------------------------------------------------------\n")
+         }
+     }
+ 
+     options(digits = 5)
+     set.seed(101) # <<-- sub-sampling algorithm now based on R's RNG and seed
+ 
+     lname <- 20
+  
+     data(heart)
+     data(starsCYG)
+     data(phosphor)
+     data(stackloss)
+     data(coleman)
+     data(salinity)
+     data(wood)
+     data(hbk)
+ 
+     data(Animals, package = "MASS")
+     brain <- Animals[c(1:24, 26:25, 27:28),]
+     data(milk)
+     data(bushfire)
+ 
+     tmp <- sys.call()
+     cat("\nCall: ", deparse(substitute(tmp)),"\n")
+ 
+     cat("Data Set               n   p       c1        M     LOG(det)       Time\n")
+     cat("======================================================================\n")
+     domest(heart[, 1:2], data(heart), nrep)
+     domest(starsCYG, data(starsCYG), nrep)
+     domest(data.matrix(subset(phosphor, select = -plant)), data(phosphor), nrep)
+     domest(stack.x, data(stackloss), nrep)
+     domest(data.matrix(subset(coleman, select = -Y)), data(coleman), nrep)
+     domest(data.matrix(subset(salinity, select = -Y)), data(salinity), nrep)
+     domest(data.matrix(subset(wood, select = -y)), data(wood), nrep)
+     domest(data.matrix(subset(hbk,  select = -Y)), data(hbk), nrep)
+ 
+     domest(brain, "Animals", nrep)
+     domest(milk, data(milk), nrep)
+     domest(bushfire, data(bushfire), nrep)
+     cat("======================================================================\n")
+ }
> 
> #   generate contaminated data using the function gendata with different
> #   number of outliers and check if the M-estimate breaks - i.e. the 
> #   largest eigenvalue is larger than e.g. 5. 
> #   For n=50 and p=10 and d=5 the M-estimate can break for number of 
> #   outliers grater than 20.
> dogen <- function(){
+     eig <- vector("numeric",26)
+     for(i in 0:25) {
+         gg <- gendata(eps=i)
+         mm <- covMest(gg$x, t0=gg$tgood, S0=gg$sgood, arp=0.001)
+         eig[i+1] <- ev <- eigen(mm$cov)$values[1]
+         # cat(i, ev, "\n")
+         
+         stopifnot(ev < 5 || i > 20)
+     }
+     # plot(0:25, eig, type="l", xlab="Number of outliers", ylab="Largest Eigenvalue")
+ }
> 
> #
> # generate data 50x10 as multivariate normal N(0,I) and add
> # eps % outliers by adding d=5.0 to each component.
> #   - if eps <0 and eps <=0.5, the number of outliers is eps*n
> #   - if eps >= 1, it is the number of outliers
> # - use the center and cov of the good data as good start
> # - use the center and the cov of all data as a bad start
> #   If using a good  start, the M-estimate must iterate to 
> #   the good solution: the largest eigenvalue is less then e.g. 5
> #
> gendata <- function(n=50, p=10, eps=0, d=5.0){
+ 
+     if(eps < 0 || eps > 0.5 && eps < 1.0 || eps > 0.5*n)
+         stop("eps is out of range")
+         
+     library(MASS)
+     
+     x <- mvrnorm(n, rep(0,p), diag(p))
+     bad <- vector("numeric")
+     nbad = if(eps < 1) eps*n else eps
+     if(nbad > 0){
+         bad <- sample(n, nbad)
+         x[bad,] <- x[bad,] + d
+     }
+     cov1 <- cov.wt(x)
+     cov2 <- if(nbad <= 0) cov1 else cov.wt(x[-bad,])
+     
+     list(x=x, bad=sort(bad), tgood=cov2$center, sgood=cov2$cov, tbad=cov1$center, sbad=cov1$cov)
+ }
> 
> pad.right <- function(z, pads)
+ {
+     ## Pads spaces to right of text
+     padding <- paste(rep(" ", pads), collapse = "")
+     paste(z, padding, sep = "")
+ }
> 
> 
> ## -- now do it:
> dodata()

Call:  dodata() 
Data Set               n   p       c1        M     LOG(det)       Time
======================================================================
heart                 12   2   0.9029   1.5448     7.160341
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  7.16 
Robust Estimate of Location:
height  weight  
  34.9    27.0  
Robust Estimate of Covariance:
        height  weight
height     102     155
weight     155     250
----------------------------------------------------------------------
starsCYG              47   2   1.2041   1.2437    -5.994588
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  -6 
Robust Estimate of Location:
   log.Te  log.light  
     4.42       4.95  
Robust Estimate of Covariance:
           log.Te  log.light
log.Te     0.0169     0.0587
log.light  0.0587     0.3523
----------------------------------------------------------------------
phosphor              18   2   1.1526   1.2951     8.867522
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  8.87 
Robust Estimate of Location:
  inorg  organic  
   15.4     39.1  
Robust Estimate of Covariance:
         inorg  organic
inorg      169      213
organic    213      308
----------------------------------------------------------------------
stackloss             21   3   0.5221   2.2734     7.241400
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  7.24 
Robust Estimate of Location:
  Air.Flow  Water.Temp  Acid.Conc.  
      59.5        20.8        87.3  
Robust Estimate of Covariance:
            Air.Flow  Water.Temp  Acid.Conc.
Air.Flow        9.34        8.69        8.52
Water.Temp      8.69       13.72        9.13
Acid.Conc.      8.52        9.13       34.54
----------------------------------------------------------------------
coleman               20   5   0.0000   3.3272     2.574752
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  2.57 
Robust Estimate of Location:
  salaryP   fatherWc    sstatus  teacherSc  motherLev  
     2.82      48.44       5.30      25.19       6.51  
Robust Estimate of Covariance:
           salaryP  fatherWc  sstatus  teacherSc  motherLev
salaryP     0.2850     0.104     1.76      0.307     0.0355
fatherWc    0.1045   824.830   260.71      3.751    17.7959
sstatus     1.7585   260.706   105.61      4.114     5.7714
teacherSc   0.3074     3.751     4.11      0.675     0.1563
motherLev   0.0355    17.796     5.77      0.156     0.4147
----------------------------------------------------------------------
salinity              28   3   0.6742   2.1212     3.875096
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  3.88 
Robust Estimate of Location:
   X1     X2     X3  
10.02   3.21  22.36  
Robust Estimate of Covariance:
       X1      X2      X3
X1  15.35   1.990  -5.075
X2   1.99   5.210  -0.769
X3  -5.08  -0.769   2.314
----------------------------------------------------------------------
wood                  20   5   0.0000   3.3272   -35.156305
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  -35.2 
Robust Estimate of Location:
   x1     x2     x3     x4     x5  
0.587  0.122  0.531  0.538  0.892  
Robust Estimate of Covariance:
           x1         x2         x3         x4         x5
x1   0.006449   1.21e-03   0.002028  -3.77e-04  -1.05e-03
x2   0.001210   3.12e-04   0.000816  -3.34e-05   1.52e-05
x3   0.002028   8.16e-04   0.004266  -5.60e-04   2.27e-04
x4  -0.000377  -3.34e-05  -0.000560   1.83e-03   1.18e-03
x5  -0.001048   1.52e-05   0.000227   1.18e-03   1.78e-03
----------------------------------------------------------------------
hbk                   75   3   0.7046   2.0909     1.432485
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  1.43 
Robust Estimate of Location:
  X1    X2    X3  
1.54  1.78  1.69  
Robust Estimate of Covariance:
        X1      X2     X3
X1  1.6485  0.0739  0.171
X2  0.0739  1.6780  0.205
X3  0.1709  0.2049  1.558
----------------------------------------------------------------------
Animals               28   2   1.2041   1.2437    18.194822
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  18.2 
Robust Estimate of Location:
 body  brain  
 18.7   64.9  
Robust Estimate of Covariance:
       body  brain
body   4993   8466
brain  8466  30335
----------------------------------------------------------------------
milk                  86   8   0.0000   3.9379   -25.041802
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  -25.0 
Robust Estimate of Location:
    X1      X2      X3      X4      X5      X6      X7      X8  
  1.03   35.88   33.04   26.11   25.09   25.02  123.12   14.39  
Robust Estimate of Covariance:
          X1        X2        X3        X4        X5        X6        X7
X1  4.89e-07  9.64e-05  0.000183  0.000176  0.000157  0.000148  0.000653
X2  9.64e-05  2.05e+00  0.337685  0.236662  0.169509  0.271320  1.911291
X3  1.83e-04  3.38e-01  1.163291  0.856115  0.848292  0.831194  0.884724
X4  1.76e-04  2.37e-01  0.856115  0.683147  0.654951  0.640414  0.691274
X5  1.57e-04  1.70e-01  0.848292  0.654951  0.693148  0.652277  0.690257
X6  1.48e-04  2.71e-01  0.831194  0.640414  0.652277  0.660682  0.694612
X7  6.53e-04  1.91e+00  0.884724  0.691274  0.690257  0.694612  4.396513
X8  5.56e-06  2.60e-01  0.198394  0.128587  0.111902  0.118766  0.411756
          X8
X1  5.56e-06
X2  2.60e-01
X3  1.98e-01
X4  1.29e-01
X5  1.12e-01
X6  1.19e-01
X7  4.12e-01
X8  1.65e-01
----------------------------------------------------------------------
bushfire              38   5   0.0000   3.3272    23.457490
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMest(x = x)
-> Method:  M-Estimator. 

Log(Det.):  23.5 
Robust Estimate of Location:
 V1   V2   V3   V4   V5  
107  147  263  215  277  
Robust Estimate of Covariance:
       V1     V2     V3    V4    V5
V1    775    560  -4179  -925  -759
V2    560    478  -2494  -510  -431
V3  -4179  -2494  27433  6441  5196
V4   -925   -510   6441  1607  1276
V5   -759   -431   5196  1276  1020
----------------------------------------------------------------------
======================================================================
> dogen()
> #cat('Time elapsed: ', proc.time(),'\n') # for ``statistical reasons''
> 
