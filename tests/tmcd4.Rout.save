
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Test the exact fit property of CovMcd
> doexact <- function(){
+     exact <-function(){    
+         n1 <- 45
+         p <- 2
+         x1 <- matrix(rnorm(p*n1),nrow=n1, ncol=p)
+         x1[,p] <- x1[,p] + 3
+ ##       library(MASS)
+ ##       x1 <- mvrnorm(n=n1, mu=c(0,3), Sigma=diag(1,nrow=p))
+         
+         n2 <- 55
+         m1 <- 0
+         m2 <- 3
+         x2 <- cbind(rnorm(n2),rep(m2,n2))
+         x<-rbind(x1,x2)
+         colnames(x) <- c("X1","X2")
+         x
+     }
+     print(CovMcd(exact()))
+ }
> 
> dodata <- function(nrep=1, time=FALSE, short=FALSE, full=TRUE, method = c("FASTMCD","MASS")){
+ ##@bdescr
+ ## Test the function covMcd() on the literature datasets: 
+ ##
+ ## Call covMcd() for all regression datasets available in rrcov and print:
+ ##  - execution time (if time == TRUE)
+ ##  - objective fucntion
+ ##  - best subsample found (if short == false)
+ ##  - outliers identified (with cutoff 0.975) (if short == false)
+ ##  - estimated center and covarinance matrix if full == TRUE)
+ ## 
+ ##@edescr
+ ##
+ ##@in  nrep              : [integer] number of repetitions to use for estimating the 
+ ##                                   (average) execution time
+ ##@in  time              : [boolean] whether to evaluate the execution time
+ ##@in  short             : [boolean] whether to do short output (i.e. only the 
+ ##                                   objective function value). If short == FALSE,
+ ##                                   the best subsample and the identified outliers are 
+ ##                                   printed. See also the parameter full below
+ ##@in  full              : [boolean] whether to print the estimated cente and covariance matrix 
+ ##@in  method            : [character] select a method: one of (FASTMCD, MASS) 
+ 
+     domcd <- function(x, xname, nrep=1){
+         n <- dim(x)[1]
+         p <- dim(x)[2]
+         if(method == "MASS"){
+             mcd<-cov.mcd(x)
+             quan <- as.integer(floor((n + p + 1)/2))   #default: floor((n+p+1)/2)
+         }            
+         else{
+             mcd<-CovMcd(x, trace=FALSE)
+             quan <- as.integer(mcd@quan)
+         }
+         
+         if(method == "MASS") 
+             crit <- mcd@crit
+         else
+             crit <- log(mcd@crit)
+             
+         if(time){
+            xtime <- system.time(dorep(x, nrep, method))[1]/nrep
+            xres <- sprintf("%3d %3d %3d %12.6f %10.3f\n", dim(x)[1], dim(x)[2], quan, crit, xtime)
+         }
+         else{
+             xres <- sprintf("%3d %3d %3d %12.6f\n", dim(x)[1], dim(x)[2], quan, crit)
+         }
+         lpad<-lname-nchar(xname)
+         cat(pad.right(xname,lpad), xres)
+ 
+         if(!short){
+             cat("Best subsample: \n")
+             print(mcd@best)
+         
+             ibad <- which(mcd@wt==0)
+             names(ibad) <- NULL
+             nbad <- length(ibad)
+             cat("Outliers: ",nbad,"\n")
+             if(nbad > 0)
+                 print(ibad)
+             if(full){
+                 cat("-------------\n")
+                 show(mcd)   
+             } 
+             cat("--------------------------------------------------------\n")
+         }
+     } 
+ 
+     options(digits = 5)
+     set.seed(101) # <<-- sub-sampling algorithm now based on R's RNG and seed
+ 
+     lname <- 20
+     library(rrcov)
+     method <- match.arg(method)
+     if(method == "MASS")
+         library(MASS)
+ 
+ 
+     data(heart)
+     data(starsCYG)
+     data(phosphor)
+     data(stackloss)
+     data(coleman)
+     data(salinity)
+     data(wood)
+ 
+     data(hbk)
+ 
+     data(Animals, package = "MASS")
+     brain <- Animals[c(1:24, 26:25, 27:28),]
+     data(milk)
+     data(bushfire)
+ 
+     tmp <- sys.call()
+     cat("\nCall: ", deparse(substitute(tmp)),"\n")
+ 
+     cat("Data Set               n   p  Half LOG(obj)        Time\n")
+     cat("========================================================\n")
+     domcd(heart[, 1:2], data(heart), nrep)
+     domcd(starsCYG, data(starsCYG), nrep)
+     domcd(data.matrix(subset(phosphor, select = -plant)), data(phosphor), nrep)
+     domcd(stack.x, data(stackloss), nrep)
+     domcd(data.matrix(subset(coleman, select = -Y)), data(coleman), nrep)
+     domcd(data.matrix(subset(salinity, select = -Y)), data(salinity), nrep)
+     domcd(data.matrix(subset(wood, select = -y)), data(wood), nrep)
+     domcd(data.matrix(subset(hbk,  select = -Y)),data(hbk), nrep)
+ 
+     domcd(brain, "Animals", nrep)
+     domcd(milk, data(milk), nrep)
+     domcd(bushfire, data(bushfire), nrep)
+     cat("========================================================\n")
+ }
> 
> dogen <- function(nrep=1, eps=0.49, method=c("FASTMCD", "MASS")){
+ 
+     domcd <- function(x, nrep=1){ 
+         gc()
+         xtime <- system.time(dorep(x, nrep, method))[1]/nrep
+         cat(sprintf("%6d %3d %10.2f\n", dim(x)[1], dim(x)[2], xtime))
+         xtime   
+     } 
+ 
+     set.seed(1234)
+ 
+     library(rrcov)
+     library(MASS)
+     method <- match.arg(method)
+ 
+     ap <- c(2, 5, 10, 20, 30)
+     an <- c(100, 500, 1000, 10000, 50000)
+ 
+     tottime <- 0
+     cat("     n   p       Time\n")
+     cat("=====================\n")
+     for(i in 1:length(an)) {
+         for(j in 1:length(ap)) {
+             n <- an[i]
+             p <- ap[j]
+             if(5*p <= n){
+                 xx <- gendata(n, p, eps)
+                 X <- xx$X
+                 tottime <- tottime + domcd(X, nrep)
+             }
+         } 
+     }
+     
+     cat("=====================\n")
+     cat("Total time: ", tottime*nrep, "\n")
+ }
> 
> docheck <- function(n, p, eps){
+     xx <- gendata(n,p,eps)
+     mcd <- CovMcd(xx$X)
+     check(mcd, xx$xind)
+ }
> 
> check <- function(mcd, xind){
+ ##  check if mcd is robust w.r.t xind, i.e. check how many of xind
+ ##  did not get zero weight
+     mymatch <- xind %in% which(mcd@wt == 0)
+     length(xind) - length(which(mymatch))    
+ }
> 
> dorep <- function(x, nrep=1, method=c("FASTMCD","MASS")){ 
+ 
+     method <- match.arg(method)
+     for(i in 1:nrep)
+     if(method == "MASS")
+         cov.mcd(x)
+     else
+         CovMcd(x)
+ } 
> 
> #### gendata() ####
> # Generates a location contaminated multivariate 
> # normal sample of n observations in p dimensions
> #    (1-eps)*Np(0,Ip) + eps*Np(m,Ip)
> # where 
> #    m = (b,b,...,b)
> # Defaults: eps=0 and b=10
> #
> gendata <- function(n,p,eps=0,b=10){
+ 
+     if(missing(n) || missing(p))
+         stop("Please specify (n,p)")
+     if(eps < 0 || eps >= 0.5)
+         stop(message="eps must be in [0,0.5)")
+     X <- mvrnorm(n,rep(0,p),diag(1,nrow=p,ncol=p))
+     nbad <- as.integer(eps * n)
+     if(nbad > 0){
+         Xbad <- mvrnorm(nbad,rep(b,p),diag(1,nrow=p,ncol=p))
+         xind <- sample(n,nbad)
+         X[xind,] <- Xbad
+     }
+     list(X=X, xind=xind)
+ }
> 
> pad.right <- function(z, pads)
+ {
+ ### Pads spaces to right of text
+     padding <- paste(rep(" ", pads), collapse = "")
+     paste(z, padding, sep = "")
+ }
> 
> whatis<-function(x){
+     if(is.data.frame(x))
+         cat("Type: data.frame\n")
+     else if(is.matrix(x))
+         cat("Type: matrix\n")
+     else if(is.vector(x))
+         cat("Type: vector\n")
+     else
+         cat("Type: don't know\n")
+ }
> 
> library(rrcov)
Loading required package: robustbase
Loading required package: pcaPP
Loading required package: mvtnorm
Scalable Robust Estimators with High Breakdown Point (version 1.1-00)
> dodata()

Call:  dodata() 
Data Set               n   p  Half LOG(obj)        Time
========================================================
heart                 12   2   7     5.678742
Best subsample: 
[1]  1  3  4  5  7  9 11
Outliers:  0 
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
height  weight  
  38.3    33.1  

Robust Estimate of Covariance: 
        height  weight
height  157     303   
weight  303     660   
--------------------------------------------------------
starsCYG              47   2  25    -8.031215
Best subsample: 
 [1]  1  2  4  6  8 10 12 13 16 24 25 26 28 32 33 37 38 39 40 41 42 43 44 45 46
Outliers:  6 
[1]  7 11 14 20 30 34
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
   log.Te  log.light  
     4.41       4.95  

Robust Estimate of Covariance: 
           log.Te  log.light
log.Te     0.0171  0.0511   
log.light  0.0511  0.3555   
--------------------------------------------------------
phosphor              18   2  10     6.878847
Best subsample: 
 [1]  3  5  8  9 11 12 13 14 15 17
Outliers:  2 
[1] 1 6
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
  inorg  organic  
   13.4     38.8  

Robust Estimate of Covariance: 
         inorg  organic
inorg    181    184    
organic  184    256    
--------------------------------------------------------
stackloss             21   3  12     5.472581
Best subsample: 
 [1]  4  5  6  7  8  9 10 11 12 13 14 20
Outliers:  9 
[1]  1  2  3 15 16 17 18 19 21
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
  Air.Flow  Water.Temp  Acid.Conc.  
      59.5        20.8        87.3  

Robust Estimate of Covariance: 
            Air.Flow  Water.Temp  Acid.Conc.
Air.Flow    12.6      11.7        11.5      
Water.Temp  11.7      18.5        12.3      
Acid.Conc.  11.5      12.3        46.6      
--------------------------------------------------------
coleman               20   5  13     1.286808
Best subsample: 
 [1]  2  3  4  5  7  8 12 13 14 16 17 19 20
Outliers:  7 
[1]  1  6  9 10 11 15 18
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
  salaryP   fatherWc    sstatus  teacherSc  motherLev  
     2.76      48.38       6.12      25.00       6.40  

Robust Estimate of Covariance: 
           salaryP   fatherWc  sstatus   teacherSc  motherLev
salaryP       0.381     2.685    -0.400     0.228      0.113 
fatherWc      2.685  1959.466   496.858    18.948     51.871 
sstatus      -0.400   496.858   180.236     5.762     15.230 
teacherSc     0.228    18.948     5.762     1.180      0.835 
motherLev     0.113    51.871    15.230     0.835      1.567 
--------------------------------------------------------
salinity              28   3  16     1.326364
Best subsample: 
 [1]  1  2  6  7  8 12 13 14 18 20 21 22 25 26 27 28
Outliers:  4 
[1]  5 16 23 24
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
   X1     X2     X3  
10.08   2.78  22.78  

Robust Estimate of Covariance: 
    X1     X2     X3   
X1  13.87   1.34  -4.24
X2   1.34   5.10  -1.92
X3  -4.24  -1.92   3.17
--------------------------------------------------------
wood                  20   5  13   -36.270094
Best subsample: 
 [1]  1  2  3  5  9 10 12 13 14 15 17 18 20
Outliers:  7 
[1]  4  6  7  8 11 16 19
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
   x1     x2     x3     x4     x5  
0.587  0.122  0.531  0.538  0.892  

Robust Estimate of Covariance: 
    x1         x2         x3         x4         x5       
x1   1.51e-02   2.83e-03   4.74e-03  -8.81e-04  -2.45e-03
x2   2.83e-03   7.29e-04   1.91e-03  -7.82e-05   3.55e-05
x3   4.74e-03   1.91e-03   9.97e-03  -1.31e-03   5.30e-04
x4  -8.81e-04  -7.82e-05  -1.31e-03   4.28e-03   2.75e-03
x5  -2.45e-03   3.55e-05   5.30e-04   2.75e-03   4.16e-03
--------------------------------------------------------
hbk                   75   3  39    -1.047858
Best subsample: 
 [1] 15 16 17 18 19 20 21 22 23 24 26 27 31 32 33 35 36 37 38 40 43 49 50 51 54
[26] 55 56 58 59 61 63 64 66 67 70 71 72 73 74
Outliers:  14 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
  X1    X2    X3  
1.54  1.78  1.69  

Robust Estimate of Covariance: 
    X1      X2      X3    
X1  1.6528  0.0741  0.1713
X2  0.0741  1.6823  0.2055
X3  0.1713  0.2055  1.5624
--------------------------------------------------------
Animals               28   2  15    14.555543
Best subsample: 
 [1]  1  3  4  5 10 11 17 18 19 20 21 22 23 26 27
Outliers:  13 
 [1]  2  6  7  8  9 12 13 14 15 16 24 25 28
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
 body  brain  
 18.7   64.9  

Robust Estimate of Covariance: 
       body   brain
body    2511   4258
brain   4258  15257
--------------------------------------------------------
milk                  86   8  47   -28.848323
Best subsample: 
 [1]  5  7  8  9 10 21 22 24 26 30 31 32 33 34 35 36 39 45 46 51 53 54 55 56 57
[26] 58 59 60 61 62 63 64 65 66 67 68 69 71 72 76 78 79 81 82 83 84 86
Outliers:  20 
 [1]  1  2  3 11 12 13 14 15 16 17 18 20 27 41 44 47 70 74 75 77
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
    X1      X2      X3      X4      X5      X6      X7      X8  
  1.03   35.89   33.08   26.14   25.12   25.05  123.17   14.38  

Robust Estimate of Covariance: 
    X1        X2        X3        X4        X5        X6        X7      
X1  5.16e-07  1.41e-04  1.79e-04  1.75e-04  1.56e-04  1.35e-04  7.00e-04
X2  1.41e-04  2.27e+00  2.83e-01  2.24e-01  1.23e-01  2.87e-01  2.01e+00
X3  1.79e-04  2.83e-01  1.34e+00  9.92e-01  9.78e-01  9.68e-01  8.37e-01
X4  1.75e-04  2.24e-01  9.92e-01  7.96e-01  7.60e-01  7.46e-01  6.98e-01
X5  1.56e-04  1.23e-01  9.78e-01  7.60e-01  8.06e-01  7.62e-01  6.79e-01
X6  1.35e-04  2.87e-01  9.68e-01  7.46e-01  7.62e-01  7.74e-01  7.22e-01
X7  7.00e-04  2.01e+00  8.37e-01  6.98e-01  6.79e-01  7.22e-01  4.79e+00
X8  1.68e-05  2.61e-01  2.27e-01  1.55e-01  1.29e-01  1.47e-01  4.38e-01
    X8      
X1  1.68e-05
X2  2.61e-01
X3  2.27e-01
X4  1.55e-01
X5  1.29e-01
X6  1.47e-01
X7  4.38e-01
X8  1.86e-01
--------------------------------------------------------
bushfire              38   5  22    18.135810
Best subsample: 
 [1]  1  2  3  4  5  6 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
Outliers:  16 
 [1]  7  8  9 10 11 12 29 30 31 32 33 34 35 36 37 38
-------------

Call:
CovMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Robust Estimate of Location: 
 V1   V2   V3   V4   V5  
105  147  274  218  279  

Robust Estimate of Covariance: 
    V1     V2     V3     V4     V5   
V1    567    439  -2771   -624   -509
V2    439    387  -1843   -376   -318
V3  -2771  -1843  16367   4021   3196
V4   -624   -376   4021   1059    827
V5   -509   -318   3196    827    652
--------------------------------------------------------
========================================================
> doexact()
The covariance matrix has become singular during
the iterations of the MCD algorithm.
There are 55 observations (in the entire dataset of 100 obs.) lying on
the line with equation -4.0161e-16 (x_i1-m_1) + -1 (x_i2-m_2) = 0 with
(m_1,m_2) the mean of these observations.

Call:
CovMcd(x = exact())
-> Method:  Minimum Covariance Determinant Estimator. 
The covariance matrix has become singular during
the iterations of the MCD algorithm.
There are 55 observations (in the entire dataset of 100 obs.) lying on
the line with equation -4.0161e-16 (x_i1-m_1) + -1 (x_i2-m_2) = 0 with
(m_1,m_2) the mean of these observations.

Robust Estimate of Location: 
    X1      X2  
-0.351   3.000  

Robust Estimate of Covariance: 
    X1         X2       
X1   4.19e+00  -7.11e-16
X2  -7.11e-16   0.00e+00
> 
