
R : Copyright 2004, The R Foundation for Statistical Computing
Version 1.9.0  (2004-04-12), ISBN 3-900051-00-3

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

> dodata <- function(nrep=1, time=FALSE, short=FALSE){
+ 
+     domcd <- function(x, xname, nrep=1, time=FALSE, short=FALSE){ 
+         mcd<-covMcd(x, print.it=FALSE)
+         quan <- mcd$quan
+         crit <- log(mcd$crit)
+         if(time){
+            xtime <- system.time(dorep(x, nrep))[1]/nrep
+             xres <- sprintf("%3d %3d %3d %12.6f %10.3f\n", dim(x)[1], dim(x)[2], quan, crit, xtime)
+         }
+         else{
+             xres <- sprintf("%3d %3d %3d %12.6f\n", dim(x)[1], dim(x)[2], quan, crit)
+         }
+         lpad<-lname-nchar(xname)
+         cat(pad.right(xname,lpad), xres)
+ 
+         if(!short){
+             cat("Best subsample: \n")
+             print(mcd$best)
+         
+             ibad <- which(mcd$mcd.wt==0)
+             names(ibad) <- NULL
+             nbad <- length(ibad)
+             cat("Outliers: ",nbad,"\n")
+             if(nbad > 0)
+                 print(ibad)
+         }
+     } 
+ 
+     lname <- 20
+     library(rrcov)
+ 
+     data(heart)
+     data(phosphor)
+     data(stackloss)
+     data(coleman)
+     data(salinity)
+     data(wood)
+ 
+     data(hbk)
+ 
+     data(brain)
+     data(milk)
+     data(bushfire)
+ 
+     cat("Data Set               n   p  Half LOG(obj)        Time\n")
+     cat("========================================================\n")
+     domcd(heart.x,data(heart), nrep, time, short)
+     domcd(phosphor.x,data(phosphor), nrep, time, short)
+     domcd(stack.x,data(stackloss), nrep, time, short)
+     domcd(coleman.x,data(coleman), nrep, time, short)
+     domcd(salinity.x,data(salinity), nrep, time, short)
+     domcd(wood.x,data(wood), nrep, time, short)
+     domcd(hbk.x,data(hbk), nrep, time, short)
+ 
+     domcd(brain,data(brain), nrep, time, short)
+     domcd(milk,data(milk), nrep, time, short)
+     domcd(bushfire,data(bushfire), nrep, time, short)
+     cat("========================================================\n")
+ }
> 
> dogen <- function(nrep=1, eps=0.4, MASS=FALSE){
+ 
+     domcd <- function(x, nrep=1, MASS=FALSE){ 
+         gc()
+         xtime <- system.time(dorep(x, nrep, MASS))[1]/nrep
+         cat(sprintf("%6d %3d %10.2f\n", dim(x)[1], dim(x)[2], xtime))
+         xtime   
+     } 
+ 
+     set.seed(1234)
+     library(MASS)
+     library(rrcov)
+     ap <- c(2, 5, 10, 20, 30)
+     an <- c(100, 500, 1000, 10000, 50000)
+ 
+ 
+     tottime <- 0
+     cat("     n   p       Time\n")
+     cat("=====================\n")
+     for(i in 1:length(an)) {
+         for(j in 1:length(ap)) {
+             n <- an[i]
+             p <- ap[j]
+             if(5*p <= n)
+                 tottime <- tottime + domcd(gendata(n, p, eps), nrep, MASS)
+         } 
+     }
+     
+     cat("=====================\n")
+     cat("Total time: ", tottime*nrep, "\n")
+ }
> 
> dorep <- function(x, nrep=1, MASS=FALSE){ 
+ 
+     for(i in 1:nrep)
+ 	if(MASS)
+             cov.mcd(x)
+         else
+             covMcd(x)
+ } 
> 
> #### gendata() ####
> # Generates a location contaminated multivariate 
> # normal sample of n observations in p dimensions
> #    (1-eps)*Np(0,Ip) + eps*Np(m,Ip)
> # where 
> #    m = (b,b,...,b)
> # Defaults: eps=0 and b=10
> #
> gendata <- function(n,p,eps=0,b=10){
+ 
+     if(eps < 0 || eps >= 0.5)
+         stop(message="eps must be in [0,0.5)")
+     X <- mvrnorm(n,rep(0,p),diag(1,nrow=p,ncol=p))
+     nbad <- as.integer(eps * n)
+     if(nbad > 0){
+         Xbad <- mvrnorm(nbad,rep(b,p),diag(1,nrow=p,ncol=p))
+         xind <- sample(n,nbad)
+         for(i in 1:nbad){
+             X[xind[i],] <- Xbad[i,] 
+         }
+     }
+     X
+ }
> 
> pad.right <- function(z, pads)
+ {
+ ### Pads spaces to right of text
+     padding <- paste(rep(" ", pads), collapse = "")
+     paste(z, padding, sep = "")
+ }
> 
> whatis<-function(x){
+     if(is.data.frame(x))
+         cat("Type: data.frame\n")
+     else if(is.matrix(x))
+         cat("Type: matrix\n")
+     else if(is.vector(x))
+         cat("Type: vector\n")
+     else
+         cat("Type: don't know\n")
+ }
> 
> library(rrcov)
Scalable Robust Estimators with High Breakdown Point (version 0.2-2)
> dodata()
Data Set               n   p  Half LOG(obj)        Time
========================================================
heart                 12   2   7     5.678742
Best subsample: 
[1]  1  3  4  5  7  9 11
Outliers:  0 
phosphor              18   2  10     6.878847
Best subsample: 
 [1]  3  5  8  9 11 12 13 14 15 17
Outliers:  2 
[1] 1 6
stackloss             21   3  12     5.472581
Best subsample: 
 [1]  4  5  6  7  8  9 10 11 12 13 14 20
Outliers:  9 
[1]  1  2  3 15 16 17 18 19 21
coleman               20   5  13     1.286808
Best subsample: 
 [1]  2  3  4  5  7  8 12 13 14 16 17 19 20
Outliers:  7 
[1]  1  6  9 10 11 15 18
salinity              28   3  16     1.326364
Best subsample: 
 [1]  1  2  6  7  8 12 13 14 18 20 21 22 25 26 27 28
Outliers:  4 
[1]  5 16 23 24
wood                  20   5  13   -36.270094
Best subsample: 
 [1]  1  2  3  5  9 10 12 13 14 15 17 18 20
Outliers:  5 
[1]  4  6  8 11 19
hbk                   75   3  39    -1.047858
Best subsample: 
 [1] 15 16 17 18 19 20 21 22 23 24 26 27 31 32 33 35 36 37 38 40 43 49 50 51 54
[26] 55 56 58 59 61 63 64 66 67 70 71 72 73 74
Outliers:  14 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14
brain                 28   2  15    14.555543
Best subsample: 
 [1]  1  3  4  5 10 11 17 18 19 20 21 22 23 25 27
Outliers:  13 
 [1]  2  6  7  8  9 12 13 14 15 16 24 26 28
milk                  86   8  47   -28.931843
Best subsample: 
 [1]  5  7  8  9 10 22 23 24 26 30 31 32 33 34 35 37 38 39 45 46 49 51 53 54 55
[26] 56 57 58 59 60 61 63 64 65 66 67 68 69 71 72 76 78 79 81 83 84 86
Outliers:  20 
 [1]  1  2  3 11 12 13 14 15 16 17 18 20 27 41 44 47 70 74 75 77
bushfire              38   5  22    18.135810
Best subsample: 
 [1]  1  2  3  4  5  6 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
Outliers:  16 
 [1]  7  8  9 10 11 12 29 30 31 32 33 34 35 36 37 38
========================================================
> 
