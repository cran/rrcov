
R : Copyright 2005, The R Foundation for Statistical Computing
Version 2.1.1  (2005-06-20), ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

> dodata <- function(nrep=1, time=FALSE, short=FALSE, full=TRUE, method = c("FASTMCD","MASS")){
+ ##@bdescr
+ ## Test the function covMcd() on the literature datasets: 
+ ##
+ ## Call covMcd() for all regression datasets available in rrcov and print:
+ ##  - execution time (if time == TRUE)
+ ##  - objective fucntion
+ ##  - best subsample found (if short == false)
+ ##  - outliers identified (with cutoff 0.975) (if short == false)
+ ##  - estimated center and covarinance matrix if full == TRUE)
+ ## 
+ ##@edescr
+ ##
+ ##@in  nrep              : [integer] number of repetitions to use for estimating the 
+ ##                                   (average) execution time
+ ##@in  time              : [boolean] whether to evaluate the execution time
+ ##@in  short             : [boolean] whether to do short output (i.e. only the 
+ ##                                   objective function value). If short == FALSE,
+ ##                                   the best subsample and the identified outliers are 
+ ##                                   printed. See also the parameter full below
+ ##@in  full              : [boolean] whether to print the estimated cente and covariance matrix 
+ ##@in  method            : [character] select a method: one of (FASTMCD, MASS) 
+ 
+     domcd <- function(x, xname, nrep=1){
+         n <- dim(x)[1]
+         p <- dim(x)[2]
+         if(method == "MASS"){
+             mcd<-cov.mcd(x)
+             quan <- as.integer(floor((n + p + 1)/2))   #default: floor((n+p+1)/2)
+         }            
+         else{
+             mcd<-covMcd(x, print.it=FALSE)
+             quan <- as.integer(mcd$quan)
+         }
+         
+         if(method == "MASS") 
+             crit <- mcd$crit
+         else
+             crit <- log(mcd$crit)
+             
+         if(time){
+            xtime <- system.time(dorep(x, nrep, method))[1]/nrep
+            xres <- sprintf("%3d %3d %3d %12.6f %10.3f\n", dim(x)[1], dim(x)[2], quan, crit, xtime)
+         }
+         else{
+             xres <- sprintf("%3d %3d %3d %12.6f\n", dim(x)[1], dim(x)[2], quan, crit)
+         }
+         lpad<-lname-nchar(xname)
+         cat(pad.right(xname,lpad), xres)
+ 
+         if(!short){
+             cat("Best subsample: \n")
+             print(mcd$best)
+         
+             ibad <- which(mcd$mcd.wt==0)
+             names(ibad) <- NULL
+             nbad <- length(ibad)
+             cat("Outliers: ",nbad,"\n")
+             if(nbad > 0)
+                 print(ibad)
+             if(full){
+                 cat("-------------\n")
+                 print(mcd)   
+             } 
+             cat("--------------------------------------------------------\n")
+         }
+     } 
+ 
+     lname <- 20
+     library(rrcov)
+     method <- match.arg(method)
+     if(method == "MASS")
+         library(MASS)
+ 
+ 
+     data(heart)
+     data(stars)
+     data(phosphor)
+     data(stackloss)
+     data(coleman)
+     data(salinity)
+     data(wood)
+ 
+     data(hbk)
+ 
+     data(brain)
+     data(milk)
+     data(bushfire)
+ 
+     tmp <- sys.call()
+     cat("\nCall: ", deparse(substitute(tmp)),"\n")
+ 
+     cat("Data Set               n   p  Half LOG(obj)        Time\n")
+     cat("========================================================\n")
+     domcd(heart.x,data(heart), nrep)
+     domcd(stars,data(stars), nrep)
+     domcd(phosphor.x,data(phosphor), nrep)
+     domcd(stack.x,data(stackloss), nrep)
+     domcd(coleman.x,data(coleman), nrep)
+     domcd(salinity.x,data(salinity), nrep)
+     domcd(wood.x,data(wood), nrep)
+     domcd(hbk.x,data(hbk), nrep)
+ 
+     domcd(brain,data(brain), nrep)
+     domcd(milk,data(milk), nrep)
+     domcd(bushfire,data(bushfire), nrep)
+     cat("========================================================\n")
+ }
> 
> dogen <- function(nrep=1, eps=0.49, method=c("FASTMCD", "MASS")){
+ 
+     domcd <- function(x, nrep=1){ 
+         gc()
+         xtime <- system.time(dorep(x, nrep, method))[1]/nrep
+         cat(sprintf("%6d %3d %10.2f\n", dim(x)[1], dim(x)[2], xtime))
+         xtime   
+     } 
+ 
+     set.seed(1234)
+ 
+     library(rrcov)
+     library(MASS)
+     method <- match.arg(method)
+ 
+     ap <- c(2, 5, 10, 20, 30)
+     an <- c(100, 500, 1000, 10000, 50000)
+ 
+     tottime <- 0
+     cat("     n   p       Time\n")
+     cat("=====================\n")
+     for(i in 1:length(an)) {
+         for(j in 1:length(ap)) {
+             n <- an[i]
+             p <- ap[j]
+             if(5*p <= n){
+                 xx <- gendata(n, p, eps)
+                 X <- xx$X
+                 tottime <- tottime + domcd(X, nrep)
+             }
+         } 
+     }
+     
+     cat("=====================\n")
+     cat("Total time: ", tottime*nrep, "\n")
+ }
> 
> docheck <- function(n, p, eps){
+     xx <- gendata(n,p,eps)
+     mcd <- covMcd(xx$X)
+     check(mcd, xx$xind)
+ }
> 
> check <- function(mcd, xind){
+ ##  check if mcd is robust w.r.t xind, i.e. check how many of xind
+ ##  did not get zero weight
+     mymatch <- xind %in% which(mcd$mcd.wt == 0)
+     length(xind) - length(which(mymatch))    
+ }
> 
> dorep <- function(x, nrep=1, method=c("FASTMCD","MASS")){ 
+ 
+     method <- match.arg(method)
+     for(i in 1:nrep)
+     if(method == "MASS")
+         cov.mcd(x)
+     else
+         covMcd(x)
+ } 
> 
> #### gendata() ####
> # Generates a location contaminated multivariate 
> # normal sample of n observations in p dimensions
> #    (1-eps)*Np(0,Ip) + eps*Np(m,Ip)
> # where 
> #    m = (b,b,...,b)
> # Defaults: eps=0 and b=10
> #
> gendata <- function(n,p,eps=0,b=10){
+ 
+     if(missing(n) || missing(p))
+         stop("Please specify (n,p)")
+     if(eps < 0 || eps >= 0.5)
+         stop(message="eps must be in [0,0.5)")
+     X <- mvrnorm(n,rep(0,p),diag(1,nrow=p,ncol=p))
+     nbad <- as.integer(eps * n)
+     if(nbad > 0){
+         Xbad <- mvrnorm(nbad,rep(b,p),diag(1,nrow=p,ncol=p))
+         xind <- sample(n,nbad)
+         X[xind,] <- Xbad
+     }
+     list(X=X, xind=xind)
+ }
> 
> pad.right <- function(z, pads)
+ {
+ ### Pads spaces to right of text
+     padding <- paste(rep(" ", pads), collapse = "")
+     paste(z, padding, sep = "")
+ }
> 
> whatis<-function(x){
+     if(is.data.frame(x))
+         cat("Type: data.frame\n")
+     else if(is.matrix(x))
+         cat("Type: matrix\n")
+     else if(is.vector(x))
+         cat("Type: vector\n")
+     else
+         cat("Type: don't know\n")
+ }
> 
> library(rrcov)
Scalable Robust Estimators with High Breakdown Point (version 0.2-8)
> dodata()

Call:  dodata() 
Data Set               n   p  Half LOG(obj)        Time
========================================================
heart                 12   2   7     5.678742
Best subsample: 
[1]  1  3  4  5  7  9 11
Outliers:  0 
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  5.679 

Center:
   X1     X2  
38.25  33.09  

Covariance Matrix:
    X1     X2   
X1  173.1  332.8
X2  332.8  726.1
--------------------------------------------------------
stars                 47   2  25    -8.031215
Best subsample: 
 [1]  1  2  4  6  8 10 12 13 16 24 25 26 28 32 33 37 38 39 40 41 42 43 44 45 46
Outliers:  6 
[1]  7 11 14 20 30 34
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  -8.031 

Center:
    X      Y  
4.409  4.949  

Covariance Matrix:
   X        Y      
X  0.01754  0.05234
Y  0.05234  0.36434
--------------------------------------------------------
phosphor              18   2  10     6.878847
Best subsample: 
 [1]  3  5  8  9 11 12 13 14 15 17
Outliers:  2 
[1] 1 6
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  6.879 

Center:
   X1     X2  
13.35  38.80  

Covariance Matrix:
    X1     X2   
X1  194.3  197.0
X2  197.0  274.4
--------------------------------------------------------
stackloss             21   3  12     5.472581
Best subsample: 
 [1]  4  5  6  7  8  9 10 11 12 13 14 20
Outliers:  9 
[1]  1  2  3 15 16 17 18 19 21
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  5.473 

Center:
  Air.Flow  Water.Temp  Acid.Conc.  
     59.50       20.83       87.33  

Covariance Matrix:
            Air.Flow  Water.Temp  Acid.Conc.
Air.Flow    13.75     12.78       12.54     
Water.Temp  12.78     20.18       13.42     
Acid.Conc.  12.54     13.42       50.81     
--------------------------------------------------------
coleman               20   5  13     1.286808
Best subsample: 
 [1]  2  3  4  5  7  8 12 13 14 16 17 19 20
Outliers:  7 
[1]  1  6  9 10 11 15 18
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  1.287 

Center:
    X1      X2      X3      X4      X5  
 2.757  48.379   6.118  25.005   6.398  

Covariance Matrix:
    X1         X2         X3         X4         X5       
X1     0.4125     2.9089    -0.4338     0.2466     0.1222
X2     2.9089  2122.7550   538.2630    20.5270    56.1936
X3    -0.4338   538.2630   195.2556     6.2423    16.4991
X4     0.2466    20.5270     6.2423     1.2787     0.9043
X5     0.1222    56.1936    16.4991     0.9043     1.6980
--------------------------------------------------------
salinity              28   3  16     1.326364
Best subsample: 
 [1]  1  2  6  7  8 12 13 14 18 20 21 22 25 26 27 28
Outliers:  4 
[1]  5 16 23 24
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  1.326 

Center:
    X1      X2      X3  
10.083   2.783  22.778  

Covariance Matrix:
    X1      X2      X3    
X1  14.503   1.400  -4.428
X2   1.400   5.329  -2.002
X3  -4.428  -2.002   3.319
--------------------------------------------------------
wood                  20   5  13   -36.270094
Best subsample: 
 [1]  1  2  3  5  9 10 12 13 14 15 17 18 20
Outliers:  5 
[1]  4  6  8 11 19
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  -36.27 

Center:
    V1      V2      V3      V4      V5  
0.5869  0.1222  0.5309  0.5382  0.8918  

Covariance Matrix:
    V1          V2          V3          V4          V5        
V1   1.633e-02   3.063e-03   5.136e-03  -9.543e-04  -2.654e-03
V2   3.063e-03   7.894e-04   2.067e-03  -8.467e-05   3.851e-05
V3   5.136e-03   2.067e-03   1.080e-02  -1.419e-03   5.739e-04
V4  -9.543e-04  -8.467e-05  -1.419e-03   4.635e-03   2.977e-03
V5  -2.654e-03   3.851e-05   5.739e-04   2.977e-03   4.506e-03
--------------------------------------------------------
hbk                   75   3  39    -1.047858
Best subsample: 
 [1] 15 16 17 18 19 20 21 22 23 24 26 27 31 32 33 35 36 37 38 40 43 49 50 51 54
[26] 55 56 58 59 61 63 64 66 67 70 71 72 73 74
Outliers:  14 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  -1.048 

Center:
   X1     X2     X3  
1.538  1.780  1.687  

Covariance Matrix:
    X1       X2       X3     
X1  1.68030  0.07533  0.17416
X2  0.07533  1.71031  0.20890
X3  0.17416  0.20890  1.58843
--------------------------------------------------------
brain                 28   2  15    14.555543
Best subsample: 
 [1]  1  3  4  5 10 11 17 18 19 20 21 22 23 26 27
Outliers:  13 
 [1]  2  6  7  8  9 12 13 14 15 16 24 25 28
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  14.56 

Center:
 body  brain  
18.67  64.94  

Covariance Matrix:
       body   brain
body    2690   4562
brain   4562  16346
--------------------------------------------------------
milk                  86   8  47   -28.931843
Best subsample: 
 [1]  5  7  8  9 10 22 23 24 26 30 31 32 33 34 35 37 38 39 45 46 49 51 53 54 55
[26] 56 57 58 59 60 61 63 64 65 66 67 68 69 71 72 76 78 79 81 83 84 86
Outliers:  20 
 [1]  1  2  3 11 12 13 14 15 16 17 18 20 27 41 44 47 70 74 75 77
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  -28.93 

Center:
     X1       X2       X3       X4       X5       X6       X7       X8  
  1.030   35.757   33.054   26.121   25.100   25.037  122.940   14.356  

Covariance Matrix:
    X1         X2         X3         X4         X5         X6         X7       
X1  6.011e-07  1.147e-04  2.314e-04  2.214e-04  1.959e-04  1.839e-04  8.034e-04
X2  1.147e-04  2.004e+00  2.813e-01  2.075e-01  1.299e-01  2.536e-01  1.643e+00
X3  2.314e-04  2.813e-01  1.513e+00  1.116e+00  1.100e+00  1.111e+00  8.867e-01
X4  2.214e-04  2.075e-01  1.116e+00  8.848e-01  8.471e-01  8.492e-01  7.261e-01
X5  1.959e-04  1.299e-01  1.100e+00  8.471e-01  8.898e-01  8.583e-01  7.332e-01
X6  1.839e-04  2.536e-01  1.111e+00  8.492e-01  8.583e-01  8.918e-01  7.355e-01
X7  8.034e-04  1.643e+00  8.867e-01  7.261e-01  7.332e-01  7.355e-01  4.457e+00
X8  4.527e-06  1.482e-01  2.215e-01  1.474e-01  1.252e-01  1.387e-01  2.724e-01
    X8       
X1  4.527e-06
X2  1.482e-01
X3  2.215e-01
X4  1.474e-01
X5  1.252e-01
X6  1.387e-01
X7  2.724e-01
X8  1.485e-01
--------------------------------------------------------
bushfire              38   5  22    18.135810
Best subsample: 
 [1]  1  2  3  4  5  6 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
Outliers:  16 
 [1]  7  8  9 10 11 12 29 30 31 32 33 34 35 36 37 38
-------------
Call:
covMcd(x = x, print.it = FALSE)


Log(det):  18.14 

Center:
   V1     V2     V3     V4     V5  
105.5  146.9  274.4  217.5  279.0  

Covariance Matrix:
    V1       V2       V3       V4       V5     
V1    593.7    459.4  -2903.2   -653.2   -532.8
V2    459.4    405.4  -1930.2   -394.3   -333.3
V3  -2903.2  -1930.2  17146.7   4212.9   3347.9
V4   -653.2   -394.3   4212.9   1109.7    866.7
V5   -532.8   -333.3   3347.9    866.7    682.6
--------------------------------------------------------
========================================================
> 
