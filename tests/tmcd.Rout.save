
R version 2.5.1 (2007-06-27)
Copyright (C) 2007 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> dodata <- function(nrep=1, time=FALSE, short=FALSE, full=TRUE, method = c("FASTMCD","MASS")){
+ ##@bdescr
+ ## Test the function covMcd() on the literature datasets: 
+ ##
+ ## Call covMcd() for all regression datasets available in rrcov and print:
+ ##  - execution time (if time == TRUE)
+ ##  - objective fucntion
+ ##  - best subsample found (if short == false)
+ ##  - outliers identified (with cutoff 0.975) (if short == false)
+ ##  - estimated center and covarinance matrix if full == TRUE)
+ ## 
+ ##@edescr
+ ##
+ ##@in  nrep              : [integer] number of repetitions to use for estimating the 
+ ##                                   (average) execution time
+ ##@in  time              : [boolean] whether to evaluate the execution time
+ ##@in  short             : [boolean] whether to do short output (i.e. only the 
+ ##                                   objective function value). If short == FALSE,
+ ##                                   the best subsample and the identified outliers are 
+ ##                                   printed. See also the parameter full below
+ ##@in  full              : [boolean] whether to print the estimated cente and covariance matrix 
+ ##@in  method            : [character] select a method: one of (FASTMCD, MASS) 
+ 
+     domcd <- function(x, xname, nrep=1){
+         n <- dim(x)[1]
+         p <- dim(x)[2]
+         if(method == "MASS"){
+             mcd<-cov.mcd(x)
+             quan <- as.integer(floor((n + p + 1)/2))   #default: floor((n+p+1)/2)
+         }            
+         else{
+             mcd<-covMcd(x, trace=FALSE)
+             quan <- as.integer(mcd$quan)
+         }
+         
+         if(method == "MASS") 
+             crit <- mcd$crit
+         else
+             crit <- log(mcd$crit)
+             
+         if(time){
+            xtime <- system.time(dorep(x, nrep, method))[1]/nrep
+            xres <- sprintf("%3d %3d %3d %12.6f %10.3f\n", dim(x)[1], dim(x)[2], quan, crit, xtime)
+         }
+         else{
+             xres <- sprintf("%3d %3d %3d %12.6f\n", dim(x)[1], dim(x)[2], quan, crit)
+         }
+         lpad<-lname-nchar(xname)
+         cat(pad.right(xname,lpad), xres)
+ 
+         if(!short){
+             cat("Best subsample: \n")
+             print(mcd$best)
+         
+             ibad <- which(mcd$mcd.wt==0)
+             names(ibad) <- NULL
+             nbad <- length(ibad)
+             cat("Outliers: ",nbad,"\n")
+             if(nbad > 0)
+                 print(ibad)
+             if(full){
+                 cat("-------------\n")
+                 print(mcd)   
+             } 
+             cat("--------------------------------------------------------\n")
+         }
+     } 
+ 
+     options(digits = 5)
+     set.seed(101) # <<-- sub-sampling algorithm now based on R's RNG and seed
+ 
+     lname <- 20
+     library(rrcov)
+     method <- match.arg(method)
+     if(method == "MASS")
+         library(MASS)
+ 
+ 
+     data(heart)
+     data(starsCYG)
+     data(phosphor)
+     data(stackloss)
+     data(coleman)
+     data(salinity)
+     data(wood)
+ 
+     data(hbk)
+ 
+     data(Animals, package = "MASS")
+     brain <- Animals[c(1:24, 26:25, 27:28),]
+     data(milk)
+     data(bushfire)
+ 
+     tmp <- sys.call()
+     cat("\nCall: ", deparse(substitute(tmp)),"\n")
+ 
+     cat("Data Set               n   p  Half LOG(obj)        Time\n")
+     cat("========================================================\n")
+     domcd(heart[, 1:2], data(heart), nrep)
+     domcd(starsCYG, data(starsCYG), nrep)
+     domcd(data.matrix(subset(phosphor, select = -plant)), data(phosphor), nrep)
+     domcd(stack.x, data(stackloss), nrep)
+     domcd(data.matrix(subset(coleman, select = -Y)), data(coleman), nrep)
+     domcd(data.matrix(subset(salinity, select = -Y)), data(salinity), nrep)
+     domcd(data.matrix(subset(wood, select = -y)), data(wood), nrep)
+     domcd(data.matrix(subset(hbk,  select = -Y)),data(hbk), nrep)
+ 
+     domcd(brain, "Animals", nrep)
+     domcd(milk, data(milk), nrep)
+     domcd(bushfire, data(bushfire), nrep)
+     cat("========================================================\n")
+ }
> 
> dogen <- function(nrep=1, eps=0.49, method=c("FASTMCD", "MASS")){
+ 
+     domcd <- function(x, nrep=1){ 
+         gc()
+         xtime <- system.time(dorep(x, nrep, method))[1]/nrep
+         cat(sprintf("%6d %3d %10.2f\n", dim(x)[1], dim(x)[2], xtime))
+         xtime   
+     } 
+ 
+     set.seed(1234)
+ 
+     library(rrcov)
+     library(MASS)
+     method <- match.arg(method)
+ 
+     ap <- c(2, 5, 10, 20, 30)
+     an <- c(100, 500, 1000, 10000, 50000)
+ 
+     tottime <- 0
+     cat("     n   p       Time\n")
+     cat("=====================\n")
+     for(i in 1:length(an)) {
+         for(j in 1:length(ap)) {
+             n <- an[i]
+             p <- ap[j]
+             if(5*p <= n){
+                 xx <- gendata(n, p, eps)
+                 X <- xx$X
+                 tottime <- tottime + domcd(X, nrep)
+             }
+         } 
+     }
+     
+     cat("=====================\n")
+     cat("Total time: ", tottime*nrep, "\n")
+ }
> 
> docheck <- function(n, p, eps){
+     xx <- gendata(n,p,eps)
+     mcd <- covMcd(xx$X)
+     check(mcd, xx$xind)
+ }
> 
> check <- function(mcd, xind){
+ ##  check if mcd is robust w.r.t xind, i.e. check how many of xind
+ ##  did not get zero weight
+     mymatch <- xind %in% which(mcd$mcd.wt == 0)
+     length(xind) - length(which(mymatch))    
+ }
> 
> dorep <- function(x, nrep=1, method=c("FASTMCD","MASS")){ 
+ 
+     method <- match.arg(method)
+     for(i in 1:nrep)
+     if(method == "MASS")
+         cov.mcd(x)
+     else
+         covMcd(x)
+ } 
> 
> #### gendata() ####
> # Generates a location contaminated multivariate 
> # normal sample of n observations in p dimensions
> #    (1-eps)*Np(0,Ip) + eps*Np(m,Ip)
> # where 
> #    m = (b,b,...,b)
> # Defaults: eps=0 and b=10
> #
> gendata <- function(n,p,eps=0,b=10){
+ 
+     if(missing(n) || missing(p))
+         stop("Please specify (n,p)")
+     if(eps < 0 || eps >= 0.5)
+         stop(message="eps must be in [0,0.5)")
+     X <- mvrnorm(n,rep(0,p),diag(1,nrow=p,ncol=p))
+     nbad <- as.integer(eps * n)
+     if(nbad > 0){
+         Xbad <- mvrnorm(nbad,rep(b,p),diag(1,nrow=p,ncol=p))
+         xind <- sample(n,nbad)
+         X[xind,] <- Xbad
+     }
+     list(X=X, xind=xind)
+ }
> 
> pad.right <- function(z, pads)
+ {
+ ### Pads spaces to right of text
+     padding <- paste(rep(" ", pads), collapse = "")
+     paste(z, padding, sep = "")
+ }
> 
> whatis<-function(x){
+     if(is.data.frame(x))
+         cat("Type: data.frame\n")
+     else if(is.matrix(x))
+         cat("Type: matrix\n")
+     else if(is.vector(x))
+         cat("Type: vector\n")
+     else
+         cat("Type: don't know\n")
+ }
> 
> library(rrcov)
Loading required package: robustbase
Scalable Robust Estimators with High Breakdown Point (version 0.4-01)
> dodata()

Call:  dodata() 
Data Set               n   p  Half LOG(obj)        Time
========================================================
heart                 12   2   7     5.678742
Best subsample: 
[1]  1  3  4  5  7  9 11
Outliers:  0 
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  5.68 
Robust Estimate of Location:
height  weight  
  38.3    33.1  
Robust Estimate of Covariance:
        height  weight
height     173     333
weight     333     726
--------------------------------------------------------
starsCYG              47   2  25    -8.031215
Best subsample: 
 [1]  1  2  4  6  8 10 12 13 16 24 25 26 28 32 33 37 38 39 40 41 42 43 44 45 46
Outliers:  6 
[1]  7 11 14 20 30 34
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  -8.03 
Robust Estimate of Location:
   log.Te  log.light  
     4.41       4.95  
Robust Estimate of Covariance:
           log.Te  log.light
log.Te     0.0175     0.0523
log.light  0.0523     0.3643
--------------------------------------------------------
phosphor              18   2  10     6.878847
Best subsample: 
 [1]  3  5  8  9 11 12 13 14 15 17
Outliers:  2 
[1] 1 6
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  6.88 
Robust Estimate of Location:
  inorg  organic  
   13.4     38.8  
Robust Estimate of Covariance:
         inorg  organic
inorg      194      197
organic    197      274
--------------------------------------------------------
stackloss             21   3  12     5.472581
Best subsample: 
 [1]  4  5  6  7  8  9 10 11 12 13 14 20
Outliers:  9 
[1]  1  2  3 15 16 17 18 19 21
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  5.47 
Robust Estimate of Location:
  Air.Flow  Water.Temp  Acid.Conc.  
      59.5        20.8        87.3  
Robust Estimate of Covariance:
            Air.Flow  Water.Temp  Acid.Conc.
Air.Flow        13.7        12.8        12.5
Water.Temp      12.8        20.2        13.4
Acid.Conc.      12.5        13.4        50.8
--------------------------------------------------------
coleman               20   5  13     1.286808
Best subsample: 
 [1]  2  3  4  5  7  8 12 13 14 16 17 19 20
Outliers:  7 
[1]  1  6  9 10 11 15 18
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  1.29 
Robust Estimate of Location:
  salaryP   fatherWc    sstatus  teacherSc  motherLev  
     2.76      48.38       6.12      25.00       6.40  
Robust Estimate of Covariance:
           salaryP  fatherWc  sstatus  teacherSc  motherLev
salaryP      0.412      2.91   -0.434      0.247      0.122
fatherWc     2.909   2122.76  538.263     20.527     56.194
sstatus     -0.434    538.26  195.256      6.242     16.499
teacherSc    0.247     20.53    6.242      1.279      0.904
motherLev    0.122     56.19   16.499      0.904      1.698
--------------------------------------------------------
salinity              28   3  16     1.326364
Best subsample: 
 [1]  1  2  6  7  8 12 13 14 18 20 21 22 25 26 27 28
Outliers:  4 
[1]  5 16 23 24
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  1.33 
Robust Estimate of Location:
   X1     X2     X3  
10.08   2.78  22.78  
Robust Estimate of Covariance:
       X1     X2     X3
X1  14.50   1.40  -4.43
X2   1.40   5.33  -2.00
X3  -4.43  -2.00   3.32
--------------------------------------------------------
wood                  20   5  13   -36.270094
Best subsample: 
 [1]  1  2  3  5  9 10 12 13 14 15 17 18 20
Outliers:  5 
[1]  4  6  8 11 19
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  -36.3 
Robust Estimate of Location:
   x1     x2     x3     x4     x5  
0.587  0.122  0.531  0.538  0.892  
Robust Estimate of Covariance:
           x1         x2         x3         x4         x5
x1   0.016327   3.06e-03   0.005136  -9.54e-04  -2.65e-03
x2   0.003063   7.89e-04   0.002067  -8.47e-05   3.85e-05
x3   0.005136   2.07e-03   0.010802  -1.42e-03   5.74e-04
x4  -0.000954  -8.47e-05  -0.001419   4.63e-03   2.98e-03
x5  -0.002654   3.85e-05   0.000574   2.98e-03   4.51e-03
--------------------------------------------------------
hbk                   75   3  39    -1.047858
Best subsample: 
 [1] 15 16 17 18 19 20 21 22 23 24 26 27 31 32 33 35 36 37 38 40 43 49 50 51 54
[26] 55 56 58 59 61 63 64 66 67 70 71 72 73 74
Outliers:  14 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  -1.05 
Robust Estimate of Location:
  X1    X2    X3  
1.54  1.78  1.69  
Robust Estimate of Covariance:
        X1      X2     X3
X1  1.6803  0.0753  0.174
X2  0.0753  1.7103  0.209
X3  0.1742  0.2089  1.588
--------------------------------------------------------
Animals               28   2  15    14.555543
Best subsample: 
 [1]  1  3  4  5 10 11 17 18 19 20 21 22 23 26 27
Outliers:  13 
 [1]  2  6  7  8  9 12 13 14 15 16 24 25 28
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  14.6 
Robust Estimate of Location:
 body  brain  
 18.7   64.9  
Robust Estimate of Covariance:
       body  brain
body   2690   4562
brain  4562  16346
--------------------------------------------------------
milk                  86   8  47   -28.848323
Best subsample: 
 [1]  5  7  8  9 10 21 22 24 26 30 31 32 33 34 35 36 39 45 46 51 53 54 55 56 57
[26] 58 59 60 61 62 63 64 65 66 67 68 69 71 72 76 78 79 81 82 83 84 86
Outliers:  20 
 [1]  1  2  3 11 12 13 14 15 16 17 18 20 27 41 44 47 70 74 75 77
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  -28.8 
Robust Estimate of Location:
    X1      X2      X3      X4      X5      X6      X7      X8  
  1.03   35.89   33.08   26.14   25.12   25.05  123.17   14.38  
Robust Estimate of Covariance:
          X1        X2        X3        X4        X5        X6        X7
X1  5.24e-07  0.000143  0.000181  0.000178  0.000158  0.000137  0.000712
X2  1.43e-04  2.311774  0.288053  0.228027  0.125129  0.291554  2.044520
X3  1.81e-04  0.288053  1.360039  1.007873  0.993727  0.984186  0.851043
X4  1.78e-04  0.228027  1.007873  0.808773  0.772841  0.758280  0.709014
X5  1.58e-04  0.125129  0.993727  0.772841  0.819483  0.774384  0.690107
X6  1.37e-04  0.291554  0.984186  0.758280  0.774384  0.786237  0.734133
X7  7.12e-04  2.044520  0.851043  0.709014  0.690107  0.734133  4.864061
X8  1.70e-05  0.265487  0.230893  0.157946  0.131312  0.149723  0.444912
          X8
X1  1.70e-05
X2  2.65e-01
X3  2.31e-01
X4  1.58e-01
X5  1.31e-01
X6  1.50e-01
X7  4.45e-01
X8  1.89e-01
--------------------------------------------------------
bushfire              38   5  22    18.135810
Best subsample: 
 [1]  1  2  3  4  5  6 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
Outliers:  16 
 [1]  7  8  9 10 11 12 29 30 31 32 33 34 35 36 37 38
-------------
Minimum Covariance Determinant (MCD) estimator.
Call:
covMcd(x = x, trace = FALSE)
-> Method:  Minimum Covariance Determinant Estimator. 

Log(Det.):  18.1 
Robust Estimate of Location:
 V1   V2   V3   V4   V5  
105  147  274  218  279  
Robust Estimate of Covariance:
       V1     V2     V3    V4    V5
V1    594    459  -2903  -653  -533
V2    459    405  -1930  -394  -333
V3  -2903  -1930  17147  4213  3348
V4   -653   -394   4213  1110   867
V5   -533   -333   3348   867   683
--------------------------------------------------------
========================================================
> 
