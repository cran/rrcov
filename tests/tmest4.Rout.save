
R version 2.6.0 Patched (2007-11-09 r43414)
Copyright (C) 2007 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rrcov)
Loading required package: robustbase
Scalable Robust Estimators with High Breakdown Point (version 0.4-03)
> library(MASS)
> dodata <- function(nrep = 1, time = FALSE, full = TRUE) {
+     domest <- function(x, xname, nrep = 1) {
+         n <- dim(x)[1]
+         p <- dim(x)[2]
+         mm <- CovMest(x)
+         crit <- log(mm@crit)
+ ##        c1 <- mm@psi@c1
+ ##        M <- mm$psi@M
+ 
+         xres <- sprintf("%3d %3d %12.6f\n", dim(x)[1], dim(x)[2], crit)
+         lpad <- lname-nchar(xname)
+         cat(pad.right(xname,lpad), xres)
+ 
+         dist <- getDistance(mm)
+         quantiel <- qchisq(0.975, p)
+         ibad <- which(dist >= quantiel)
+         names(ibad) <- NULL
+         nbad <- length(ibad)
+         cat("Outliers: ",nbad,"\n")
+         if(nbad > 0)
+             print(ibad)
+         cat("-------------\n")
+         show(mm)   
+         cat("--------------------------------------------------------\n")
+     }
+ 
+     options(digits = 5)
+     set.seed(101) # <<-- sub-sampling algorithm now based on R's RNG and seed
+ 
+     lname <- 20
+  
+     data(heart)
+     data(starsCYG)
+     data(phosphor)
+     data(stackloss)
+     data(coleman)
+     data(salinity)
+     data(wood)
+     data(hbk)
+ 
+     data(Animals, package = "MASS")
+     brain <- Animals[c(1:24, 26:25, 27:28),]
+     data(milk)
+     data(bushfire)
+ 
+     tmp <- sys.call()
+     cat("\nCall: ", deparse(substitute(tmp)),"\n")
+ 
+     cat("Data Set               n   p       c1        M     LOG(det)       Time\n")
+     cat("======================================================================\n")
+     domest(heart[, 1:2], data(heart), nrep)
+     domest(starsCYG, data(starsCYG), nrep)
+     domest(data.matrix(subset(phosphor, select = -plant)), data(phosphor), nrep)
+     domest(stack.x, data(stackloss), nrep)
+     domest(data.matrix(subset(coleman, select = -Y)), data(coleman), nrep)
+     domest(data.matrix(subset(salinity, select = -Y)), data(salinity), nrep)
+     domest(data.matrix(subset(wood, select = -y)), data(wood), nrep)
+     domest(data.matrix(subset(hbk,  select = -Y)), data(hbk), nrep)
+ 
+ 
+     domest(brain, "Animals", nrep)
+     domest(milk, data(milk), nrep)
+     domest(bushfire, data(bushfire), nrep)
+     cat("======================================================================\n")
+ }
> 
> #   generate contaminated data using the function gendata with different
> #   number of outliers and check if the M-estimate breaks - i.e. the 
> #   largest eigenvalue is larger than e.g. 5. 
> #   For n=50 and p=10 and d=5 the M-estimate can break for number of 
> #   outliers grater than 20.
> dogen <- function(){
+     eig <- vector("numeric",26)
+     for(i in 0:25) {
+         gg <- gendata(eps=i)
+         mm <- CovMest(gg$x, t0=gg$tgood, S0=gg$sgood, arp=0.001)
+         eig[i+1] <- ev <- getEvals(mm)[1]
+         # cat(i, ev, "\n")
+         
+         stopifnot(ev < 5 || i > 20)
+     }
+     # plot(0:25, eig, type="l", xlab="Number of outliers", ylab="Largest Eigenvalue")
+ }
> 
> #
> # generate data 50x10 as multivariate normal N(0,I) and add
> # eps % outliers by adding d=5.0 to each component.
> #   - if eps <0 and eps <=0.5, the number of outliers is eps*n
> #   - if eps >= 1, it is the number of outliers
> # - use the center and cov of the good data as good start
> # - use the center and the cov of all data as a bad start
> #   If using a good  start, the M-estimate must iterate to 
> #   the good solution: the largest eigenvalue is less then e.g. 5
> #
> gendata <- function(n=50, p=10, eps=0, d=5.0){
+ 
+     if(eps < 0 || eps > 0.5 && eps < 1.0 || eps > 0.5*n)
+         stop("eps is out of range")
+         
+     library(MASS)
+     
+     x <- mvrnorm(n, rep(0,p), diag(p))
+     bad <- vector("numeric")
+     nbad = if(eps < 1) eps*n else eps
+     if(nbad > 0){
+         bad <- sample(n, nbad)
+         x[bad,] <- x[bad,] + d
+     }
+     cov1 <- cov.wt(x)
+     cov2 <- if(nbad <= 0) cov1 else cov.wt(x[-bad,])
+     
+     list(x=x, bad=sort(bad), tgood=cov2$center, sgood=cov2$cov, tbad=cov1$center, sbad=cov1$cov)
+ }
> 
> pad.right <- function(z, pads)
+ {
+     ## Pads spaces to right of text
+     padding <- paste(rep(" ", pads), collapse = "")
+     paste(z, padding, sep = "")
+ }
> 
> 
> ## -- now do it:
> dodata()

Call:  dodata() 
Data Set               n   p       c1        M     LOG(det)       Time
======================================================================
heart                 12   2     7.116594
Outliers:  5 
[1]  2  6  8 10 12
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
height  weight  
  39.8    35.7  

Robust Estimate of Covariance: 
        height  weight
height   38.0    76.8 
weight   76.8   187.4 
--------------------------------------------------------
starsCYG              47   2    -5.994599
Outliers:  7 
[1]  7  9 11 14 20 30 34
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
   log.Te  log.light  
     4.42       4.95  

Robust Estimate of Covariance: 
           log.Te  log.light
log.Te     0.0169  0.0587   
log.light  0.0587  0.3523   
--------------------------------------------------------
phosphor              18   2     8.867568
Outliers:  3 
[1]  1  6 10
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
  inorg  organic  
   15.4     39.1  

Robust Estimate of Covariance: 
         inorg  organic
inorg    169    213    
organic  213    308    
--------------------------------------------------------
stackloss             21   3     7.241400
Outliers:  9 
[1]  1  2  3 15 16 17 18 19 21
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
  Air.Flow  Water.Temp  Acid.Conc.  
      59.5        20.8        87.3  

Robust Estimate of Covariance: 
            Air.Flow  Water.Temp  Acid.Conc.
Air.Flow     9.34      8.69        8.52     
Water.Temp   8.69     13.72        9.13     
Acid.Conc.   8.52      9.13       34.54     
--------------------------------------------------------
coleman               20   5     4.062258
Outliers:  7 
[1]  2  6 10 11 14 15 18
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
  salaryP   fatherWc    sstatus  teacherSc  motherLev  
     2.86      51.61       8.40      25.24       6.50  

Robust Estimate of Covariance: 
           salaryP   fatherWc  sstatus   teacherSc  motherLev
salaryP      0.3464   -0.7624   -0.0693    0.3968     0.0367 
fatherWc    -0.7624  969.5316  176.4997    7.7160    22.8309 
sstatus     -0.0693  176.4997   41.3531    2.5018     4.7008 
teacherSc    0.3968    7.7160    2.5018    1.0667     0.3092 
motherLev    0.0367   22.8309    4.7008    0.3092     0.6216 
--------------------------------------------------------
salinity              28   3     3.875096
Outliers:  9 
[1]  3  5 10 11 15 16 17 23 24
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
   X1     X2     X3  
10.02   3.21  22.36  

Robust Estimate of Covariance: 
    X1      X2      X3    
X1  15.353   1.990  -5.075
X2   1.990   5.210  -0.769
X3  -5.075  -0.769   2.314
--------------------------------------------------------
wood                  20   5   -32.359807
Outliers:  2 
[1] 7 9
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
   x1     x2     x3     x4     x5  
0.555  0.134  0.501  0.517  0.914  

Robust Estimate of Covariance: 
    x1         x2         x3         x4         x5       
x1   0.009862  -0.000417   0.004736   0.002994  -0.003927
x2  -0.000417   0.000575  -0.000305  -0.001116   0.000633
x3   0.004736  -0.000305   0.004422   0.002428  -0.001434
x4   0.002994  -0.001116   0.002428   0.004442  -0.001480
x5  -0.003927   0.000633  -0.001434  -0.001480   0.002683
--------------------------------------------------------
hbk                   75   3     1.432485
Outliers:  14 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
  X1    X2    X3  
1.54  1.78  1.69  

Robust Estimate of Covariance: 
    X1      X2      X3    
X1  1.6485  0.0739  0.1709
X2  0.0739  1.6780  0.2049
X3  0.1709  0.2049  1.5584
--------------------------------------------------------
Animals               28   2    19.340922
Outliers:  10 
 [1]  2  6  7  9 12 14 15 16 25 28
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
 body  brain  
 21.5   89.6  

Robust Estimate of Covariance: 
       body   brain
body    5445  13171
brain  13171  77950
--------------------------------------------------------
milk                  86   8   -25.117490
Outliers:  20 
 [1]  1  2  3 11 12 13 14 15 16 17 18 20 27 41 44 47 70 74 75 77
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
    X1      X2      X3      X4      X5      X6      X7      X8  
  1.03   35.89   33.11   26.16   25.14   25.08  123.12   14.40  

Robust Estimate of Covariance: 
    X1        X2        X3        X4        X5        X6        X7      
X1  4.83e-07  9.79e-05  1.88e-04  1.80e-04  1.63e-04  1.55e-04  6.50e-04
X2  9.79e-05  2.03e+00  3.17e-01  2.21e-01  1.52e-01  2.51e-01  1.89e+00
X3  1.88e-04  3.17e-01  1.21e+00  8.89e-01  8.54e-01  8.57e-01  8.50e-01
X4  1.80e-04  2.21e-01  8.89e-01  7.03e-01  6.55e-01  6.55e-01  6.66e-01
X5  1.63e-04  1.52e-01  8.54e-01  6.55e-01  6.72e-01  6.40e-01  6.64e-01
X6  1.55e-04  2.51e-01  8.57e-01  6.55e-01  6.40e-01  6.62e-01  6.64e-01
X7  6.50e-04  1.89e+00  8.50e-01  6.66e-01  6.64e-01  6.64e-01  4.36e+00
X8  6.49e-06  2.55e-01  2.02e-01  1.31e-01  1.11e-01  1.20e-01  4.05e-01
    X8      
X1  6.49e-06
X2  2.55e-01
X3  2.02e-01
X4  1.31e-01
X5  1.11e-01
X6  1.20e-01
X7  4.05e-01
X8  1.63e-01
--------------------------------------------------------
bushfire              38   5    23.457490
Outliers:  15 
 [1]  7  8  9 10 11 29 30 31 32 33 34 35 36 37 38
-------------

Call:
CovMest(x = x)
-> Method:  M-Estimates 

Robust Estimate of Location: 
 V1   V2   V3   V4   V5  
107  147  263  215  277  

Robust Estimate of Covariance: 
    V1     V2     V3     V4     V5   
V1    775    560  -4179   -925   -759
V2    560    478  -2494   -510   -431
V3  -4179  -2494  27433   6441   5196
V4   -925   -510   6441   1607   1276
V5   -759   -431   5196   1276   1020
--------------------------------------------------------
======================================================================
> dogen()
> #cat('Time elapsed: ', proc.time(),'\n') # for ``statistical reasons''
> 
